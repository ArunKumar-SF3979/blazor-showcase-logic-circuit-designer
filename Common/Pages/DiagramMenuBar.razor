@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Diagram
@using Syncfusion.PdfExport;
@using System.Collections.ObjectModel;
@using Syncfusion.Blazor.SplitButtons;
@using LogicCircuit.Shared

@inject IJSRuntime jsRuntime
@namespace LogicCircuit

<div class="db-header-container">
    <div class='@menuClass'>
        <h1 id='diagramName' style="width: 250px; font-size: 12px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" class="db-diagram-name"
              @onclick="@renameDiagram">@diagramName</h1>
        <input id='diagramEditable' @ref="input" type="text" class="db-diagram-name" @onkeydown="@diagramNameKeyDown" @onfocusout="@diagramNameChange"  @bind-value="@value"/>
        <span id='diagramreport' class="db-diagram-name db-save-text"></span>
    </div>
    <div class="db-menu-container">
        <SfDropDownButton @ref="FileButton" Id ="btnFileMenu" Content="File" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="@FileMenuItems" TValue="ContextMenuItemModel">
                    <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected='e =>MenuClick(e,"btnFileMenu")'></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>
        <SfDropDownButton  @ref="EditButton" Id ="btnEditMenu" Content="Edit" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownfileOpenButtonOpened"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="@EditMenuItems" TValue="ContextMenuItemModel">
                    <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected='e =>MenuClick(e,"btnEditMenu")'></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>

         <SfDropDownButton  @ref="DesignButton" Id ="btnDesignMenu" Content="Design" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownDesignButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="@DesignMenuItems" TValue="ContextMenuItemModel">
                    <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected='e =>MenuClick(e,"btnDesignMenu")'></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>
           <SfDropDownButton @ref="Selectbutton" Id ="btnSelectMenu" Content="Select" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownSelectButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="@SelectMenuItems">
                    <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected='e =>MenuClick(e,"btnSelectMenu")'></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>
         <SfDropDownButton @ref="ToolsButton" Id ="btnToolsMenu" Content="Tools" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownToolsButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="@ToolsMenuItems">
                    <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected='e =>MenuClick(e,"btnToolsMenu")'></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>

        <SfDropDownButton @ref="ViewButton" Id ="btnViewMenu" Content="View" CssClass="e-dropDown-button">
            <ChildContent>
                <DropDownButtonEvents OnOpen="@DropDownViewButtonOpen"></DropDownButtonEvents>
            </ChildContent>
            <PopupContent>
                <SfContextMenu @ref="ContextMenu" Items="@ViewMenuItems">
                    <MenuEvents TValue="ContextMenuItemModel" Created="OnMenuCreated" ItemSelected='e =>MenuClick(e,"btnViewMenu")'></MenuEvents>
                </SfContextMenu>
            </PopupContent>
        </SfDropDownButton>      

        <SfUploader  Id ="defaultfileupload" ShowFileList="false" AllowedExtensions="@ExtensionType">
            <UploaderEvents Success="@OnUploadSuccess" OnUploadStart="@OnUploadFileSelected"></UploaderEvents>
            <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/production/api/FileUploader/Remove"></UploaderAsyncSettings>
        </SfUploader>
        <DiagramSaveDialog @ref="@SaveDialogBox"></DiagramSaveDialog>
        <DiagramExportDialog @ref="@ExportDialogBox"></DiagramExportDialog>
        <DiagramPrintDialog @ref="@PrintDialogBox"></DiagramPrintDialog>
    </div>
</div>

@code {

    /// <summary>
    /// Reference to the print dialog box.
    /// </summary>
    DiagramPrintDialog? PrintDialogBox;
    /// <summary>
    /// Reference to the export dialog box.
    /// </summary>
    DiagramExportDialog? ExportDialogBox;
    /// <summary>
    /// Reference to the save dialog box.
    /// </summary>
    DiagramSaveDialog? SaveDialogBox;
    /// <summary>
    /// Reference to the file item in the menu bar.
    /// </summary>
    SfDropDownButton? FileButton; 
    /// <summary>
    /// Reference to the view item in the menu bar.
    /// </summary>
    SfDropDownButton? ViewButton;
    /// <summary>
    /// Reference to the edit item in the menu bar.
    /// </summary>
    SfDropDownButton? EditButton;
    /// <summary>
    /// Reference to the select item in the menu bar.
    /// </summary>
    SfDropDownButton? Selectbutton;
    /// <summary>
    /// Reference to the desiagn item in the menu bar.
    /// </summary>
    SfDropDownButton? DesignButton;
    /// <summary>
    /// Reference to the tools item in the menu bar.
    /// </summary>
    SfDropDownButton? ToolsButton;   
    /// <summary>
    /// Gets or sets the extension type for files used.
    /// </summary>   
    string ExtensionType = ".json";   
    // <summary>
    /// Gets or sets a collection of items that are disabled in the application.
    /// </summary>
    private List<string>? DisableCollection;
    private ElementReference input;
    /// <summary>
    /// Gets or sets a value indicating whether the "Paste" button is enabled.
    /// </summary>
    private bool enablePasteButton = false;

    public bool IsPasteOptionEnabled { get; set; } = false;
    SfContextMenu<ContextMenuItemModel>? ContextMenu;
    /// <summary>
    /// Gets or sets the CSS class applied to the menu bar in the application.
    /// </summary>
    private string menuClass { get; set; } = "db-diagram-name-container";
    /// <summary>
    /// Reference to the diagram main content
    /// </summary>

    // public DiagramMain Parent { get; set; } = MainLayout.DiagramMain;
    public DiagramMain Parent { get; set; }
    public string diagramName { get; set; } = "Untitled Diagram";
    /// <summary>
    /// Gets or sets diagram name 
    /// 
    public string value { get; set; } = "";
    public bool IsOpenClick = false;
    /// <summary>
    /// Asynchronously renames the current diagram.
    /// </summary>
    private async Task renameDiagram()
    {
        menuClass += " db-edit-name";
        value = diagramName;
        await input.FocusAsync();
        await jsRuntime.InvokeVoidAsync("renameDiagram1", input);
    }
    /// <summary>
    /// Event handler for the key down event when editing the diagram name.
    /// </summary>
    private void diagramNameKeyDown(KeyboardEventArgs  args)
    {
        if (args.Key == "Enter")
        {
            diagramName = "";
            string edit = " db-edit-name";
            if (menuClass.Contains(edit))
            {
                int first = menuClass.IndexOf(edit);
                menuClass = menuClass.Remove(first);
            }
        }
    }
    /// <summary>
    /// Handles the change event when the diagram name is edited.
    /// </summary>
    private void diagramNameChange( Microsoft.AspNetCore.Components.Web.FocusEventArgs args)
    {
        diagramName = value;
        string edit = " db-edit-name";
        if (menuClass.Contains(edit))
        {
            int first = menuClass.IndexOf(edit);
            menuClass = menuClass.Remove(first);
        }
    }

    /// <summary>
    /// Event handler for when the drop-down button is opened.
    /// </summary>

    private void DropDownButtonOpen() {
        this.ItemSelection();
        for (int i = 0; i < FileMenuItems.Count; i++)
        {
            if (DisableCollection != null && DisableCollection.IndexOf(FileMenuItems[i].Text) > -1)
            {
                FileMenuItems[i].Disabled = true;
            }
            else
            {

                FileMenuItems[i].Disabled = false;
            }
        }
    }
    /// <summary>
    /// This method will be called when menu bar created.
    /// </summary>
    public void OnMenuCreated()
    {
        if (ContextMenu != null)
        {
            ContextMenu.OpenAsync();
        }
    }
    /// <summary>
    /// Event handler for when the drop-down file open button is opened.
    /// </summary>
    private void DropDownfileOpenButtonOpened()
    {
        this.ItemSelection();
        for(int i =0; i<EditMenuItems.Count; i++)
        {
            if (DisableCollection != null &&  DisableCollection.IndexOf(EditMenuItems[i].Text) > -1)
            {
                EditMenuItems[i].Disabled = true;
            }
            else {

                EditMenuItems[i].Disabled = false;
            }
        }

    }
    /// <summary>
    /// Event handler for when the drop-down design button is opened.
    /// </summary>
    private void DropDownDesignButtonOpen()
    {
        this.ItemSelection();
        for (int i = 0; i < DesignMenuItems.Count; i++)
        {
            if (DisableCollection != null && DisableCollection.IndexOf(DesignMenuItems[i].Text) > -1)
            {
                DesignMenuItems[i].Disabled = true;
            }
            else
            {
                DesignMenuItems[i].Disabled = false;
            }
        } 

    }
    /// <summary>
    /// Event handler for when the drop-down select button is opened.
    /// </summary>
    private void DropDownSelectButtonOpen()
    {
        this.ItemSelection();
        for (int i = 0; i < SelectMenuItems.Count; i++)
        {
            if (DisableCollection != null && DisableCollection.IndexOf(SelectMenuItems[i].Text) > -1)
            {
                SelectMenuItems[i].Disabled = true;
            }
            else
            {
                SelectMenuItems[i].Disabled = false;
            }
        }
    }
    /// <summary>
    /// Event handler for when the drop-down tool button is opened.
    /// </summary>
    private void DropDownToolsButtonOpen()
    {
        this.ItemSelection();
        for (int i = 0; i < ToolsMenuItems.Count; i++)
        {
            if (DisableCollection != null && DisableCollection.IndexOf(ToolsMenuItems[i].Text) > -1)
            {
                ToolsMenuItems[i].Disabled = true;
            }
            else
            {
                ToolsMenuItems[i].Disabled = false;
            }
        }
    }
    /// <summary>
    /// Event handler for when the drop-down view button is opened.
    /// </summary>
    private void DropDownViewButtonOpen()
    {
        this.ItemSelection();
        for (int i = 0; i < ViewMenuItems.Count; i++)
        {
            if (DisableCollection != null && DisableCollection.IndexOf(ViewMenuItems[i].Text) > -1)
            {
                ViewMenuItems[i].Disabled = true;
            }
            else
            {
                ViewMenuItems[i].Disabled = false;
            }
        }
    }   
    private void DropDownWindowButtonOpen()
    {
        this.ItemSelection();
    }

    public class ContextMenuItemModel
    {
#pragma warning disable CS8618
        public List<ContextMenuItemModel> Items { get; set; }
#pragma warning restore CS8618
        public string Text { get; set; } = "";
        public string Id { get; set; } = "";
        public string IconCss { get; set; } = "";
        public Boolean Separator { get; set; } = false;
        public Boolean Disabled { get; set; } = false;
    }
    /// <summary>
    /// Represents a list of context menu items for editing operations.
    /// </summary>
    internal List<  ContextMenuItemModel> EditMenuItems = new List<  ContextMenuItemModel>
{
    new   ContextMenuItemModel {Id ="EditMenuItemsUndo", Text= "Undo", IconCss="sf-icon-Undo" },
    new   ContextMenuItemModel { Id ="EditMenuItemsRedo",Text= "Redo", IconCss="sf-icon-Redo" },
    new   ContextMenuItemModel { Separator= true },
    new   ContextMenuItemModel { Id ="EditMenuItemsCut",Text= "Cut", IconCss="sf-icon-Cut" },
    new   ContextMenuItemModel { Id ="EditMenuItemsCopy",Text= "Copy", IconCss="sf-icon-Copy" },
    new   ContextMenuItemModel {Id ="EditMenuItemsPaste", Text= "Paste", IconCss="sf-icon-Paste" },
    new   ContextMenuItemModel {
        Id ="EditMenuItemsRotate",
        Text= "Rotate",
        IconCss="sf-icon-rotate",
        Items = new List<  ContextMenuItemModel>
                    {
                        new   ContextMenuItemModel { Text="Rotate Right 90",IconCss = "sf-icon-rotate-right" },
                        new   ContextMenuItemModel { Text="Rotate Left 90", IconCss = "sf-icon-rotate-left" },

                    },
    },
    new   ContextMenuItemModel {Id ="EditMenuItemsDelete", Text= "Delete", IconCss="sf-icon-Delete" },
    new   ContextMenuItemModel { Separator= true },

};
    /// <summary>
    /// Represents a list of context menu items for DesignMenuItems operations.
    /// </summary>
    public List<ContextMenuItemModel> DesignMenuItems = new List<ContextMenuItemModel>
{
      new   ContextMenuItemModel
                {
                    Id = "DesignMenuItemsOrientation",
                    Text = "Orientation",
                    Items = new List<  ContextMenuItemModel>
                    {
                        new   ContextMenuItemModel { Text="Landscape",IconCss = "sf-icon-Selection" },
                        new   ContextMenuItemModel { Text="Portrait", IconCss = "sf-icon-blank" },
                    },
                   IconCss="sf-icon-orientation"
                },

     new  ContextMenuItemModel
     {
         Id ="DesignMenuItemsSize", 
         Text= "Size",
         Items = new List<  ContextMenuItemModel>
                    { 
                        new   ContextMenuItemModel { Text="Letter (8.5 in x 11 in)", IconCss = "sf-icon-Selection" },
                        new   ContextMenuItemModel { Text="Legal (8.5 in x 14 in)",IconCss = "sf-icon-blank" },
                        new   ContextMenuItemModel { Text="Tabloid (279 mm x 432 mm)", IconCss = "sf-icon-blank" },
                         new   ContextMenuItemModel { Text="A3 (297 mm x 420 mm)", IconCss = "sf-icon-blank" },
                          new   ContextMenuItemModel { Text="A4 (210 mm x 297 mm)", IconCss = "sf-icon-blank" },
                           new   ContextMenuItemModel { Text="A5 (148 mm x 210 mm)", IconCss = "sf-icon-blank" },
                          new   ContextMenuItemModel { Text="A6 (105 mm x 148 mm)", IconCss = "sf-icon-blank" },

                    },

         IconCss="sf-icon-blank" 

     },
};
    /// <summary>
    /// Represents a list of context menu items for Select menu operations.
    /// </summary>
    private List<ContextMenuItemModel> SelectMenuItems = new List<ContextMenuItemModel>
    {
          new   ContextMenuItemModel { Id ="SelectMenuItemsSelectAll",Text= "Select All", IconCss = "sf-icon-blank" },
          new   ContextMenuItemModel { Id ="SelectMenuItemsSelectAllNodes",Text= "Select All Nodes", IconCss = "sf-icon-blank" },
          new   ContextMenuItemModel { Id ="SelectMenuItemsSelectAllConnectors",Text= "Select All Connectors", IconCss = "sf-icon-blank" },
            new   ContextMenuItemModel { Id ="SelectMenuItemsDeSelectAll",Text= "Deselect All", IconCss = "sf-icon-blank" },
    };
    /// <summary>
    /// Represents a list of context menu items for Tools menu operations.
    /// </summary>
    public List<ContextMenuItemModel> ToolsMenuItems = new List<ContextMenuItemModel>
    {
          new   ContextMenuItemModel { Id ="ToolsMenuItemsSelection",Text= "Selection Tool", IconCss = "sf-icon-Selector" },
          new   ContextMenuItemModel { Id ="ToolsMenuItemsPan",Text= "Pan Tool", IconCss = "sf-icon-Pan" },


    };

    /// <summary>
    /// Represents a list of context menu items for Files operations.
    /// </summary>
    private List<  ContextMenuItemModel> FileMenuItems = new List<  ContextMenuItemModel>
{
    new   ContextMenuItemModel {Id ="FileMenuItemsNew", Text = "New", IconCss = "sf-icon-circle-add" },
    new   ContextMenuItemModel {Id ="FileMenuItemsOpen", Text = "Open", IconCss = "e-icons e-folder-open" },
    new   ContextMenuItemModel { Separator = true },
    new   ContextMenuItemModel { Id ="FileMenuItemsSave",Text = "Save", IconCss="sf-icon-Save" },
    new   ContextMenuItemModel { Id ="FileMenuItemsSaveAs",Text = "Save As", IconCss = "sf-icon-save-as" },
     new   ContextMenuItemModel { Separator = true},
    new   ContextMenuItemModel {Id ="FileMenuItemsExport", Text = "Export", IconCss="sf-icon-Export" },   
    new   ContextMenuItemModel { Id ="FileMenuItemsPrint",Text = "Print",  IconCss="sf-icon-Print" }

};
    /// <summary>
    /// Represents a list of context menu items for View menu operations.
    /// </summary>
    public List<  ContextMenuItemModel> ViewMenuItems = new List<  ContextMenuItemModel>
    {
                 new   ContextMenuItemModel { Text="Show Grid" ,IconCss="sf-icon-Selection"},
         new   ContextMenuItemModel { Text="Snap To Grid", IconCss = "sf-icon-Selection" },
         new   ContextMenuItemModel { Text="Snap To Object", IconCss = "sf-icon-Selection" },
         new   ContextMenuItemModel { Text="Show Page Breaks", IconCss = "sf-icon-blank" },
         new   ContextMenuItemModel { Text="Show Multiple Page", IconCss = "sf-icon-Selection" },
         new   ContextMenuItemModel { Separator= true },
        new   ContextMenuItemModel { Text ="Fit To Width", IconCss = "sf-icon-blank" },
        new   ContextMenuItemModel { Text ="Fit To Page", IconCss = "sf-icon-blank" },


    };      
    /// <summary>
    /// Invoked after the component has been rendered.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (SaveDialogBox != null)
                SaveDialogBox.Parent = this;
            if (ExportDialogBox != null)
                ExportDialogBox.Parent = this;
            if (PrintDialogBox != null)
                PrintDialogBox.Parent = this;
        }

    }

    /// <summary>
    /// Event handler for the menu item click event.
    /// </summary>
    /// <param name="args">The event arguments containing information about the clicked menu item.</param>
    public async Task MenuClick(Syncfusion.Blazor.Navigations.MenuEventArgs<ContextMenuItemModel> args, string id)
    {
        bool Edit = false;
        bool File = false;       
        bool view = false;        
        bool Select = false;
        bool Design = false;
        bool Tools = false;
        Syncfusion.Blazor.Diagram.SfDiagramComponent diagram = Parent.DiagramContent.Diagram;
        ObservableCollection<IDiagramObject> collection = new ObservableCollection<IDiagramObject>();
        string commandType = args.Item.Text.Replace(" ", "");
        switch (commandType.ToLower())
        {
            case "new":               
                File = true;
                Parent.DiagramContent.IsLoadingData = false;
                diagram.Clear();
                Parent.DiagramContent.IsLoadingData = true;
                SetElements();
                break;
            case "open":
                File = true;
                await OpenUploadBox(true, ".json");
                IsOpenClick = true;
                break;
            case "undo":
                Edit = true;
                if(diagram.SelectionSettings.Nodes.Count >1 || diagram.SelectionSettings.Connectors.Count > 1)
                {
                    diagram.StartGroupAction();
                }
                diagram.Undo();
                if(diagram.SelectionSettings.Nodes.Count >1 || diagram.SelectionSettings.Connectors.Count > 1)
                {
                    diagram.EndGroupAction();
                }
                break;
            case "redo":
                Edit = true;
                if(diagram.SelectionSettings.Nodes.Count >1 || diagram.SelectionSettings.Connectors.Count > 1)
                {
                    diagram.StartGroupAction();
                }
                diagram.Redo();
                if(diagram.SelectionSettings.Nodes.Count >1 || diagram.SelectionSettings.Connectors.Count > 1)
                {
                    diagram.EndGroupAction();
                }
                break;          
            case "save":
                File = true;             
                string fileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
                await Download(fileName);
                break;
            case "saveas":
                File = true;
                if (SaveDialogBox != null && SaveDialogBox.SaveDialog != null)
                {
                    SaveDialogBox.DiagramfileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
                    await SaveDialogBox.SaveDialog.ShowAsync();
                }
                break;
            case "print":                
                File = true;
                if (PrintDialogBox != null && PrintDialogBox.PrintDialog != null)
                {
                    await PrintDialogBox.PrintDialog.ShowAsync();
                }
                break;
            case "export":
                File = true;
                if (ExportDialogBox != null && ExportDialogBox.ExportDialog != null)
                {
                    await ExportDialogBox.ExportDialog.ShowAsync();
                }
                break;
            case "cut":
                Edit = true;              
                diagram.Cut();              
                enablePasteButton = true;
                break;
            case "copy":
                Edit = true;
                enablePasteButton = true;               
                diagram.Copy();              
                break;
            case "paste":
                Edit = true;
                IsPasteOptionEnabled = true;
                diagram.Paste();               
                break;
            case "delete":
                Edit = true;
                bool GroupAction = false;
                Parent.DiagramContent.IsLoadingData = false;
                if(diagram.SelectionSettings.Nodes.Count > 1 || diagram.SelectionSettings.Connectors.Count > 1 || ((diagram.SelectionSettings.Nodes.Count + diagram.SelectionSettings.Connectors.Count) > 1))
                {
                    GroupAction = true;
                }
                if (GroupAction)
                {
                    diagram.StartGroupAction();
                }
                if (diagram.SelectionSettings.Nodes.Count != 0)
                {
                    for (var i = diagram.SelectionSettings.Nodes.Count-1; i >=0; i--)
                    {
                        Node item = diagram.SelectionSettings.Nodes[i];

                        diagram.Nodes.Remove(item);
                    }
                }
                if (diagram.SelectionSettings.Connectors.Count != 0)
                {
                    for (var i = diagram.SelectionSettings.Connectors.Count-1; i >=0; i--)
                    {
                        var item1 = diagram.SelectionSettings.Connectors[i];

                        diagram.Connectors.Remove(item1);
                    }
                }
                if (GroupAction)
                {
                    diagram.EndGroupAction();
                }
                Parent.DiagramContent.IsLoadingData = true;
                break;                   
            case "rotateleft90":
                Edit = true;  
                ObservableCollection<Node> nodes = Parent.DiagramPropertyPanel.OnSelectedNode();
                if (nodes.Count > 0)
                {
                    diagram.StartGroupAction();
                    diagram.BeginUpdate();
                    for (int i = 0; i < nodes.Count; i++)
                    {
                        nodes[i].RotationAngle = nodes[i].RotationAngle - 90;
                    }
                    await diagram.EndUpdateAsync();
                    diagram.EndGroupAction();
                }
                Parent.DiagramContent.StateChanged();
                break;     
            case "rotateright90":
                Edit = true;
                ObservableCollection<Node> selectedNodes = Parent.DiagramPropertyPanel.OnSelectedNode();
                if (selectedNodes.Count > 0)
                {
                    diagram.StartGroupAction();
                    diagram.BeginUpdate();
                    for(int i =0;i <selectedNodes.Count;i++)
                    {
                        selectedNodes[i].RotationAngle = selectedNodes[i].RotationAngle + 90;
                    }
                    await diagram.EndUpdateAsync();
                    diagram.EndGroupAction();                   
                }
                Parent.DiagramContent.StateChanged();
                break;
            case "pantool":
                Tools = true;
                Parent.DiagramContent.UpdateTool();
                Parent.DiagramContent.StateChanged();
                diagram.ClearSelection();
                Parent.Toolbar.PanItemCssClass += " tb-item-selected";
                Parent.Toolbar.removeSelectedToolbarItem("pan tool");
                Parent.Toolbar.StateChanged();
                break;
            case "selectiontool":
                Tools = true;                
                Parent.DiagramContent.DiagramDrawingObject = null;
                Parent.DiagramContent.UpdatePointerTool();
                Parent.DiagramContent.StateChanged();
                Parent.Toolbar.PointerItemCssClass += " tb-item-selected";
                Parent.Toolbar.removeSelectedToolbarItem("pointer");
                Parent.Toolbar.StateChanged();                
                break;
            case "selectall":
                Select = true;
                diagram.ClearSelection();
                diagram.SelectAll();
                break;
            case "selectallnodes":
                Select = true;
                diagram.ClearSelection();
                foreach (Node node in diagram.Nodes)
                {
                    collection.Add(node);
                }
                diagram.BeginUpdate();
                diagram.Select(collection, false);
                await diagram.EndUpdateAsync();
                break;
            case "selectallconnectors":
                Select = true;
                diagram.ClearSelection();                
                foreach (Connector connector in diagram.Connectors)
                {
                    collection.Add(connector);
                }   
                diagram.BeginUpdate();
                diagram.Select(collection);
                await diagram.EndUpdateAsync();
                break;
            case "deselectall":
                Select = true;
                diagram.ClearSelection();
                break;
            case "showgrid":
                view = true;
                diagram.BeginUpdate();
                Parent.DiagramContent.SnapConstraint = Parent.DiagramContent.SnapConstraint ^ SnapConstraints.ShowLines;
                await diagram.EndUpdateAsync();
                ViewMenuItems[0].IconCss = ViewMenuItems[0].IconCss == "sf-icon-blank" ? "sf-icon-Selection" : "sf-icon-blank";
                break;
            case "snaptogrid":
                view = true;
                Parent.DiagramContent.SnapConstraint = Parent.DiagramContent.SnapConstraint ^ SnapConstraints.SnapToLines;
                ViewMenuItems[1].IconCss = ViewMenuItems[1].IconCss == "sf-icon-blank" ? "sf-icon-Selection" : "sf-icon-blank";
                break;
            case "snaptoobject":
                view = true;
                Parent.DiagramContent.SnapConstraint = Parent.DiagramContent.SnapConstraint ^ SnapConstraints.SnapToObject;
                ViewMenuItems[2].IconCss = ViewMenuItems[2].IconCss == "sf-icon-blank" ? "sf-icon-Selection" : "sf-icon-blank";
                break;
            case "fittowidth":
                view = true;
                FitOptions fitoption = new FitOptions()
                {
                    Mode = FitMode.Width,
                        Region = DiagramRegion.PageSettings,
                };
                Parent.DiagramContent.Diagram.FitToPage(fitoption);
                break;
            case "fittopage":
                view = true;
                FitOptions fitoption1 = new FitOptions()
                    {
                        Mode = FitMode.Both,
                        Region = DiagramRegion.Content,
                    };
                Parent.DiagramContent.Diagram.FitToPage(fitoption1);
                break;
            case "showpagebreaks":
                view= true;
                diagram.BeginUpdate();
                Parent.DiagramContent.DiagramShowPageBreaks = !Parent.DiagramContent.DiagramShowPageBreaks;
                await diagram.EndUpdateAsync();
                Parent.DiagramContent.StateChanged();
                ViewMenuItems[3].IconCss = ViewMenuItems[3].IconCss == "sf-icon-blank" ? "sf-icon-Selection" : "sf-icon-blank";
                Parent.DiagramPropertyPanel.ShowPageBreaksValue = !Parent.DiagramPropertyPanel.ShowPageBreaksValue;
                Parent.DiagramPropertyPanel.StateChanged();
                break;
            case "showmultiplepage":
                view =true;
                ViewMenuItems[4].IconCss = ViewMenuItems[4].IconCss == "sf-icon-blank" ? "sf-icon-Selection" : "sf-icon-blank";
                diagram.BeginUpdate();
                if (ViewMenuItems[4].IconCss == "sf-icon-blank")
                {
                    Parent.DiagramContent.IsMultiplePage = false;                  
                }
                else
                {
                    Parent.DiagramContent.IsMultiplePage = true; ;
                }                               
                await diagram.EndUpdateAsync();
                break;
            case "zoomin":
                view = true;
                Parent.DiagramContent.ZoomTo(new DiagramMainContent.ZoomOptions() { Type = "ZoomIn", ZoomFactor = 0.2 });
                Parent.Toolbar.DiagramZoomValueChange();
                break;
            case "zoomout":
                view = true;
                Parent.DiagramContent.ZoomTo(new DiagramMainContent.ZoomOptions() { Type = "ZoomOut", ZoomFactor = 0.2 });
                Parent.Toolbar.DiagramZoomValueChange();
                break;
            case "landscape":
                Design = true;
                diagram.BeginUpdate();
                Parent.DiagramContent.DiagramOrientation = PageOrientation.Landscape;
                await diagram.EndUpdateAsync();                                   
                DesignMenuItems[0].Items[0].IconCss = "sf-icon-Selection" ;
                DesignMenuItems[0].Items[1].IconCss =  "sf-icon-blank";                    
                Parent.DiagramPropertyPanel.landscapeStyleClass = "e-control e-btn e-lib e-flat e-primary e-active";
                Parent.DiagramPropertyPanel.portraitStyleClass = "e-control e-btn e-lib e-flat e-primary";
                Parent.DiagramPropertyPanel.StateChanged();               
                break;
            case "portrait":
                Design = true;       
                diagram.BeginUpdate();
                Parent.DiagramContent.DiagramOrientation = PageOrientation.Portrait;                
                await diagram.EndUpdateAsync();
                DesignMenuItems[0].Items[1].IconCss = "sf-icon-Selection";
                DesignMenuItems[0].Items[0].IconCss = "sf-icon-blank";                
                Parent.DiagramPropertyPanel.portraitStyleClass = "e-control e-btn e-lib e-flat e-primary e-active";
                Parent.DiagramPropertyPanel.landscapeStyleClass = "e-control e-btn e-lib e-flat e-primary";
                Parent.DiagramPropertyPanel.StateChanged();               
                break;
            case "legal(8.5inx14in)":
            case "letter(8.5inx11in)":
            case "tabloid(279mmx432mm)":
            case "a3(297mmx420mm)":
            case "a4(210mmx297mm)":
            case "a5(148mmx210mm)":
            case "a6(105mmx148mm)":
                Design = true;
                double PageWidth;
                double PageHeight;
                PaperSize paperSize = GetPaperSize(commandType.ToLower());
                PageWidth = paperSize.PageWidth;
                PageHeight = paperSize.PageHeight;
                if (PageWidth > 0 && PageHeight > 0)
                {
                    if (Parent.DiagramContent.DiagramOrientation == PageOrientation.Portrait)
                    {
                        if (PageWidth > PageHeight)
                        {
                            double temp = PageWidth;
                            PageWidth = PageHeight;
                            PageHeight = temp;
                        }
                    }
                    else
                    {
                        if (PageHeight > PageWidth)
                        {
                            double temp = PageHeight;
                            PageHeight = PageWidth;
                            PageWidth = temp;
                        }
                    }
                    Parent.DiagramContent.DiagramPageWidth = PageWidth;
                    Parent.DiagramContent.DiagramPageHeight = PageHeight;
                }
                string paperFormt = args.Item.Text.Split(" ")[0];
                RemoveSelectedMenuBarItem(paperFormt);
                Parent.DiagramPropertyPanel.PaperListValue = paperFormt;
                Parent.DiagramPropertyPanel.StateChanged();
                break;                
        }
        if(Edit && EditButton != null)
            EditButton.Toggle();
        if (File && FileButton != null)
            FileButton.Toggle();
        if (view && ViewButton != null)
            ViewButton.Toggle();        
        if (Select && Selectbutton!= null)
            Selectbutton.Toggle();
        if (Design && DesignButton != null)
            DesignButton.Toggle();
        if (Tools && ToolsButton != null)
            ToolsButton.Toggle();
        await jsRuntime.InvokeAsync<string>("BlurSelectedItem", id);
    }
    /// <summary>
    /// Set the toolbar and menu bar elements when new diagram is created
    /// </summary>    
    public async void SetElements()
    {
        SfDiagramComponent diagram = Parent.DiagramContent.Diagram;
        Parent.DiagramContent.IsUndo = false;
        Parent.DiagramContent.IsRedo = false;      
        diagram.ClearHistory();
        Parent.DiagramContent.SnapConstraint = SnapConstraints.All;
        diagram.ResetZoom();     
        await Parent.Toolbar.EnableToolbarItems(new object() { }, "historychange");
        Parent.Toolbar.StateChanged();
        this.ItemSelection();
        StateHasChanged();      
    }
    public async void FlipOptions(string flip)
    {
        Syncfusion.Blazor.Diagram.SfDiagramComponent diagram = Parent.DiagramContent.Diagram;
        ObservableCollection<Node> selectedNodes = Parent.DiagramPropertyPanel.OnSelectedNode();
        diagram.BeginUpdate();
        if (selectedNodes.Count > 0)
        {
            if (selectedNodes.Count > 0)
            {
                for (int i = 0; i < selectedNodes.Count; i++)
                {
                    selectedNodes[i].Flip = flip == "Flip Horizontal" ? FlipDirection.Horizontal : FlipDirection.Vertical;
                }
            }
        }
        ObservableCollection<Connector> selectedConnectors = Parent.DiagramPropertyPanel.OnSelectedConnector();
        if (selectedConnectors.Count > 0)
        {
            for (int i = 0; i < selectedConnectors.Count; i++)
            {
                selectedConnectors[i].Flip = flip == "Flip Horizontal" ? FlipDirection.Horizontal : FlipDirection.Vertical;
            }
        }
        await diagram.EndUpdateAsync();
    }
    /// <summary>
    /// Updates the selected menu bar item based on the provided paper type.
    /// </summary>

    public void UpdateSelectedMenuBarItem(string paperType)
    {
        if (paperType == "Letter" && (DesignMenuItems[1].Items[0].IconCss).IndexOf("sf-icon-Selection") == -1)
        {
            DesignMenuItems[1].Items[0].IconCss = (DesignMenuItems[1].Items[0].IconCss).Replace("sf-icon-blank", "sf-icon-Selection");
        }
        if (paperType == "Legal" && (DesignMenuItems[1].Items[1].IconCss).IndexOf("sf-icon-Selection") == -1)
        {
            DesignMenuItems[1].Items[1].IconCss = (DesignMenuItems[1].Items[1].IconCss).Replace("sf-icon-blank", "sf-icon-Selection");
        }
        if (paperType == "Tabloid" && (DesignMenuItems[1].Items[2].IconCss).IndexOf("sf-icon-Selection") == -1)
        {
            DesignMenuItems[1].Items[2].IconCss = (DesignMenuItems[1].Items[2].IconCss).Replace("sf-icon-blank", "sf-icon-Selection");
        }
        if (paperType == "A3" && (DesignMenuItems[1].Items[3].IconCss).IndexOf("sf-icon-Selection") == -1)
        {
            DesignMenuItems[1].Items[3].IconCss = (DesignMenuItems[1].Items[3].IconCss).Replace("sf-icon-blank", "sf-icon-Selection");
        }
        if (paperType == "A4" && (DesignMenuItems[1].Items[4].IconCss).IndexOf("sf-icon-Selection") == -1)
        {
            DesignMenuItems[1].Items[4].IconCss = (DesignMenuItems[1].Items[4].IconCss).Replace("sf-icon-blank", "sf-icon-Selection");
        }
        if (paperType == "A5" && (DesignMenuItems[1].Items[5].IconCss).IndexOf("sf-icon-Selection") == -1)
        {
            DesignMenuItems[1].Items[5].IconCss = (DesignMenuItems[1].Items[5].IconCss).Replace("sf-icon-blank", "sf-icon-Selection");
        }
        if (paperType == "A6" && (DesignMenuItems[1].Items[6].IconCss).IndexOf("sf-icon-Selection") == -1)
        {
            DesignMenuItems[1].Items[6].IconCss = (DesignMenuItems[1].Items[6].IconCss).Replace("sf-icon-blank", "sf-icon-Selection");
        }
    }

    /// <summary>
    /// Removes the selected menu bar item based on the provided paper type.
    /// </summary>

    public void RemoveSelectedMenuBarItem(string paperType)
    {

        if (paperType != "Letter" && (DesignMenuItems[1].Items[0].IconCss).IndexOf("sf-icon-Selection") != -1)
        {
            DesignMenuItems[1].Items[0].IconCss = (DesignMenuItems[1].Items[0].IconCss).Replace("sf-icon-Selection", "sf-icon-blank");
        }
        if (paperType != "Legal" && (DesignMenuItems[1].Items[1].IconCss).IndexOf("sf-icon-Selection") != -1)
        {
            DesignMenuItems[1].Items[1].IconCss = (DesignMenuItems[1].Items[1].IconCss).Replace("sf-icon-Selection", "sf-icon-blank");
        }
        if (paperType != "Tabloid" && (DesignMenuItems[1].Items[2].IconCss).IndexOf("sf-icon-Selection") != -1)
        {
            DesignMenuItems[1].Items[2].IconCss = (DesignMenuItems[1].Items[2].IconCss).Replace("sf-icon-Selection", "sf-icon-blank");
        }
        if (paperType != "A3" && (DesignMenuItems[1].Items[3].IconCss).IndexOf("sf-icon-Selection") != -1)
        {
            DesignMenuItems[1].Items[3].IconCss = (DesignMenuItems[1].Items[3].IconCss).Replace("sf-icon-Selection", "sf-icon-blank");
        }
        if (paperType != "A4" && (DesignMenuItems[1].Items[4].IconCss).IndexOf("sf-icon-Selection") != -1)
        {
            DesignMenuItems[1].Items[4].IconCss = (DesignMenuItems[1].Items[4].IconCss).Replace("sf-icon-Selection", "sf-icon-blank");
        }
        if (paperType != "A5" && (DesignMenuItems[1].Items[5].IconCss).IndexOf("sf-icon-Selection") != -1)
        {
            DesignMenuItems[1].Items[5].IconCss = (DesignMenuItems[1].Items[5].IconCss).Replace("sf-icon-Selection", "sf-icon-blank");
        }
        if (paperType != "A6" && (DesignMenuItems[1].Items[6].IconCss).IndexOf("sf-icon-Selection") != -1)
        {
            DesignMenuItems[1].Items[6].IconCss = (DesignMenuItems[1].Items[6].IconCss).Replace("sf-icon-Selection", "sf-icon-blank");
        }


    }


    /// <summary>
    /// Retrieves the paper size based on the provided paper name.
    /// </summary>
    /// <param name="paperName">The name of the paper for which the size is to be retrieved.</param>
    /// 
    public PaperSize GetPaperSize(string paperName)
    {

        PaperSize Paper = new PaperSize();

        switch (paperName)
        {
            case "letter(8.5inx11in)":
                Paper.PageWidth = 816;
                Paper.PageHeight = 1056;
                DesignMenuItems[1].Items[0].IconCss = "sf-icon-Selection";
                break;
            case "legal(8.5inx14in)":
                Paper.PageWidth = 816;
                Paper.PageHeight = 1344;
                DesignMenuItems[1].Items[1].IconCss = "sf-icon-Selection";
                break;
            case "tabloid(279mmx432mm)":
                Paper.PageWidth = 1056;
                Paper.PageHeight = 1632;
                DesignMenuItems[1].Items[2].IconCss = "sf-icon-Selection";
                break;
            case "a3(297mmx420mm)":
                Paper.PageWidth = 1122;
                Paper.PageHeight = 1587;
                DesignMenuItems[1].Items[3].IconCss = "sf-icon-Selection";
                break;
            case "a4(210mmx297mm)":
                Paper.PageWidth = 793;
                Paper.PageHeight = 1122;
                DesignMenuItems[1].Items[4].IconCss = "sf-icon-Selection";
                break;
            case "a5(148mmx210mm)":
                Paper.PageWidth = 559;
                Paper.PageHeight = 793;
                DesignMenuItems[1].Items[5].IconCss = "sf-icon-Selection";
                break;
            case "a6(105mmx148mm)":
                Paper.PageWidth = 396;
                Paper.PageHeight = 559;
                DesignMenuItems[1].Items[6].IconCss = "sf-icon-Selection";
                break;
        }
        return Paper;
    }
    /// <summary>
    /// Represents the dimensions of a paper size, including width and height.
    /// </summary>
    public class PaperSize
    {
        public double PageWidth { get; set; }
        public double PageHeight { get; set; }
    }

    /// <summary>
    /// Opens the upload box based on the specified parameters.
    /// </summary>
    /// <param name="isOpen">A boolean value indicating whether the upload box should be opened or closed.</param>
    /// <param name="extensionType">The type of file extensions allowed for uploading (e.g., ".jpg, .png, .pdf").</param>

    public async Task OpenUploadBox(bool isOpen, string extensionType)
    {
        ExtensionType = extensionType;
        await FileUtil.Click(jsRuntime);
        StateHasChanged();
    }
    public void ItemSelection()
    {
        List<string> DisableCollection = new List<string>();
        double DiagramCount = Parent.DiagramContent.Diagram.Nodes.Count + Parent.DiagramContent.Diagram.Connectors.Count;
        ObservableCollection<object> collection = new ObservableCollection<object>();
        var nodes = Parent.DiagramContent.Diagram.SelectionSettings.Nodes;
        var connectors = Parent.DiagramContent.Diagram.SelectionSettings.Connectors;

        foreach (Node node in nodes)
        {
            collection.Add(node);
        }
        foreach (Connector connector in connectors)
        {
            collection.Add(connector);
        }


        Node node1 = new Node();
        NodeGroup node2 = new NodeGroup();
        Connector connector1 = new Connector();

        if (collection != null && collection.Count > 0)
        {
            if (collection[0] is Node node)
            {
                node1 = node;
            }
            else if (collection[0] is NodeGroup nodeGroup)
            {
                node2 = nodeGroup;
            }
            else if (collection[0] is Connector connector)
            {
                connector1 = connector;
            }
        }

        bool isLock = ((node1 != null && node1.Constraints.HasFlag(NodeConstraints.Drag)) || (connector1 != null && connector1.Constraints.HasFlag(ConnectorConstraints.Drag))) ? false : true;

        Dictionary<string, bool> Select = new Dictionary<string, bool>()
{
            {"Undo",!Parent.DiagramContent.IsUndo},
            {"Redo",!Parent.DiagramContent.IsRedo},
            {"Cut", collection != null && collection.Count == 0?true:false},
            {"Copy",collection != null && collection.Count == 0?true:false},
            {"Paste",!enablePasteButton},
            {"Delete",collection != null && collection.Count == 0?true:false},
            {"Rotate",collection != null && collection.Count == 0?true:false},
            {"Order Commands",collection != null && collection.Count == 0?true:false},
        };
        Dictionary<string, bool> ArrangeSelect = new Dictionary<string, bool>()
{
            {"Send To Back",((collection != null &&  collection.Count > 1) || (collection != null && collection.Count == 0))?true:false},
            {"Bring To Front",((collection != null &&  collection.Count > 1) || (collection != null && collection.Count == 0))?true:false},
            {"Send Backward",((collection != null &&  collection.Count > 1) || (collection != null && collection.Count == 0))?true:false},
            {"Bring Forward",((collection != null &&  collection.Count > 1) || (collection != null && collection.Count == 0))?true:false},
            {"Align Objects",((collection != null &&  collection.Count == 1) || (collection != null && collection.Count == 0))?true:false},
            {"Distribute Objects",((collection != null &&  collection.Count == 1) || (collection != null && collection.Count == 0))?true:false},
            {"Match Size",((collection != null &&  collection.Count == 1) || (collection != null && collection.Count == 0))?true:false},
            {"Lock",isLock},
            {"Unlock",(collection != null && collection.Count == 0 ||!isLock)?true:false},
            {"Group",(collection != null && collection.Count > 1)?false:true||(collection != null &&  collection.Count == 1)?true:false||(collection != null &&  collection.Count < 1)?false:true},
            {"Ungroup",(collection != null && collection.Count==1 && node2 != null && (node2 as NodeGroup).Children  != null && (node2 as NodeGroup).Children.Length > 0)?false:true }
        };
        foreach (var Text in Select)
        {
            if (Text.Value)
            {
                DisableCollection.Add(Text.Key);
            }
        }

        foreach (var Text in ArrangeSelect)
        {
            if (Text.Value)
            {
                DisableCollection.Add(Text.Key);
            }
        }
        this.DisableCollection = DisableCollection;       
    }

    /// <summary>
    /// Initiates a file download with the specified file name.
    /// </summary>
    /// <param name="fileName">The name of the file to be downloaded.</param>

    public async Task Download(string fileName)
    {
        string data = Parent.DiagramContent.Diagram.SaveDiagram();
        await FileUtil.SaveAs(jsRuntime, data, fileName);
    }

    public void OnUploadSuccess(SuccessEventArgs args)
    {
        if (args.Operation != "remove")
        {
            var file1 = args.File;
            var file = file1.RawFile;
            var fileType = file1.Type.ToString();
        }
    }
    /// <summary>
    /// Event handler for when a file is selected for upload.
    /// </summary>
    /// <param name="args">The event arguments containing information about the selected file.</param>

    public async Task OnUploadFileSelected(Syncfusion.Blazor.Inputs.UploadingEventArgs args)
    {
        SfDiagramComponent Diagram = Parent.DiagramContent.Diagram;
        if (args.FileData.Type == "json")
        {          
            await Task.Delay(100);
            string json = await FileUtil.LoadFile(jsRuntime, args.FileData);
            json = json.Replace(System.Environment.NewLine, string.Empty);
            Parent.DiagramContent.IsLoadingData = false;
            await Parent.DiagramContent.Diagram.LoadDiagramAsync(json.ToString());
            Parent.DiagramContent.IsLoadingData = true;
        }
        else
        {

            Node Node = Diagram.SelectionSettings.Nodes[0];
            Diagram.BeginUpdate();
            Node.Shape = new ImageShape() { Type = NodeShapes.Image, Source = args.FileData.RawFile.ToString() };
            await Diagram.EndUpdateAsync();
        }
    }
    /// <summary>
    /// Export the diagram to a specific file format with the provided export options.
    /// </summary>
    /// <param name="exportOptions">The export settings to customize the diagram export.</param>
    /// <param name="exportType">The type of file format to export the diagram (e.g., "png", "jpeg", "pdf", etc.).</param>
    /// <param name="fileName">The name of the exported file without the file extension.</param>
    public async Task ExportDiagram(Syncfusion.Blazor.Diagram.DiagramExportSettings exportOptions, string exportType, string fileName)
    {
        var diagram = Parent.DiagramContent.Diagram;
        DiagramExportFormat exportFormat = DiagramExportFormat.JPEG;
        var images = await diagram.ExportAsync(exportFormat, exportOptions);
        var Orientation = (Parent.DiagramContent.DiagramOrientation == PageOrientation.Landscape) ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;
        if (exportType.ToString() == "PDF")
        {
            await ExportToPdf(fileName, Orientation, true, images);
        }
        else
        {
            exportFormat = (DiagramExportFormat)(Enum.Parse(typeof(DiagramExportFormat), exportType.ToString(), true));
            await diagram.ExportAsync(fileName, exportFormat, exportOptions);
        }
    }
    /// <summary>
    /// Export the content to a PDF document with the specified options.
    /// </summary>
    /// <param name="fileName">The name of the exported PDF file (without the file extension).</param>
    /// <param name="orientation">The page orientation for the exported PDF (e.g., Portrait or Landscape).</param>
    /// <param name="allowDownload">A boolean value indicating whether to allow the user to download the PDF after exporting.</param>
    /// <param name="images">An array of image file paths or URLs to be included in the PDF content.</param>
    private async Task<string> ExportToPdf(string fileName, PdfPageOrientation orientation, bool allowDownload, string[] images)
    {
        PdfDocument document = new PdfDocument();
        document.PageSettings.Orientation = orientation;
        document.PageSettings.Margins = new PdfMargins() { Left = 0, Right = 0, Top = 0, Bottom = 0 };
        string base64String;
        var dict = images;
        for (int i = 0; i < dict.Count(); i++)
        {
            base64String = dict[i];
            using (MemoryStream initialStream = new MemoryStream(Convert.FromBase64String(base64String.Split("base64,")[1])))
            {
                Stream stream = initialStream as Stream;
                PdfPage page = document.Pages.Add();
                PdfGraphics graphics = page.Graphics;
#pragma warning disable CA2000
                PdfBitmap image = new PdfBitmap(stream);
#pragma warning restore CA2000
                graphics.DrawImage(image, 0, 0);

            }
        }
        using (MemoryStream memoryStream = new MemoryStream())
        {
            document.Save(memoryStream);
            memoryStream.Position = 0;
            base64String = Convert.ToBase64String(memoryStream.ToArray());
            if (allowDownload)
            {
                await JSRuntimeExtensions.InvokeAsync<string>(jsRuntime, "downloadPdf", new object[] { base64String, fileName });
                base64String = string.Empty;
            }
            else
            {
                base64String = "data:application/pdf;base64," + base64String;
            }

            document.Dispose();
        }

        return base64String;
    }

    /// <summary>
    /// Prints the diagram with the specified print settings.
    /// </summary>
    /// <param name="printOptions">The print settings to customize the diagram print.</param>
    public async Task PrintDiagram(Syncfusion.Blazor.Diagram.DiagramPrintSettings printOptions)
    {
        var diagram = Parent.DiagramContent.Diagram;

        await diagram.PrintAsync(printOptions);
    }

    /// <summary>
    /// Enables specific menu items in the collection based on the provided item text.
    /// </summary>
    public bool EnableMenuItems(string itemText, ObservableCollection<object> collection)
    {

        if (itemText != "")
        {
            var commandType = itemText.Replace(" ", "");
            if (collection.Count == 0)
            {
                switch (commandType.ToLower())
                {
                    case "cut":
                        return true;
                    case "copy":
                        return true;
                    case "delete":
                        return true;
                    case "duplicate":
                        return true;
                }
            }

            if (!enablePasteButton && itemText == "Paste")
            {
                return true;
            }
            if ( itemText == "Undo")
            {

                return !this.Parent.DiagramContent.IsUndo;
            }
            if ( itemText == "Redo")
            {

                return !this.Parent.DiagramContent.IsRedo;
            }
            if (itemText == "Select All")
            {
                if (collection.Count == 0)
                {
                    return true;
                }
            }

        }
        return false;

    }
    /// <summary>
    /// Notifies the component that its state has changed and requests a re-render.
    /// </summary>
    public void StateChanged()
    {
        StateHasChanged();
    }
}
