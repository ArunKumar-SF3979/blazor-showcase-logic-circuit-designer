@using LogicCircuit.Shared
@namespace LogicCircuit

<div id="LogicCircuit-container"  style="visibility:visible;" class=@DiagramBuilderClassName>   
    <DiagramMenuBar @ref="MenuBar"></DiagramMenuBar>
    <DiagramToolBar @ref="Toolbar"></DiagramToolBar>
    <div class='row content' style="padding-top:0px">
        <DiagramLeftSideBar @ref="LeftSideBar"></DiagramLeftSideBar>
        <div class='main-content' role='main'>
            <DiagramMainContent @ref="DiagramContent"></DiagramMainContent>
            <div class=@PropertyPanelClassName style="overflow:auto;">
                <DiagramPropertyContainer @ref="DiagramPropertyPanel"></DiagramPropertyContainer>
            </div>
        </div>
    </div>
</div>


@code {
      
   
    public MainLayout Parent { get; set; }
    public string DiagramBuilderClassName = "LogicCircuit-container";   
    public DiagramMainContent DiagramContent { get; set; }
    public string PropertyPanelClassName = "db-property-editor-container";  
    public DiagramPropertyContainer DiagramPropertyPanel { get; set; }   
    public DiagramMenuBar MenuBar { get; set; }
    public DiagramToolBar Toolbar { get; set; }  
    public DiagramLeftSideBar LeftSideBar { get; set; }
    [Inject]
    protected IJSRuntime? jsRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            if (this.MenuBar != null)
                this.MenuBar.Parent = this;
            if (this.DiagramContent != null)
                this.DiagramContent.Parent = this;
            if (this.Toolbar != null)
                this.Toolbar.Parent = this;           
            if (this.DiagramPropertyPanel != null)
                this.DiagramPropertyPanel.Parent = this;
            if (this.LeftSideBar != null)
                this.LeftSideBar.Parent = this;         
        }
    }    
    public void StateChanged()
    {
        StateHasChanged();
    }

}
